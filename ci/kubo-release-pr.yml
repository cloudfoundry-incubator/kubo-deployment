---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

resources:
- name: git-kubo-deployment
  type: git
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-deployment
    branch: master
    private_key: {{git-ssh-key}}

- name: git-kubo-release
  type: pull-request
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-release
    repo: pivotal-cf-experimental/kubo-release
    base: master
    private_key: {{git-ssh-key}}
    access_token: {{github-token-key}}

- name: kubo-lock
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: {{git-ssh-key}}
    pool: kubo-deployment

- name: s3-bosh-state
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    bucket: kubo-pipeline-store
    endpoint: s3-eu-west-1.amazonaws.com
    region_name: eu-west-1
    versioned_file: bosh/state.json

- name: s3-bosh-creds
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    bucket: kubo-pipeline-store
    endpoint: s3-eu-west-1.amazonaws.com
    region_name: eu-west-1
    versioned_file: bosh/creds.yml

- name: s3-service-creds
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    bucket: kubo-pipeline-store
    endpoint: s3-eu-west-1.amazonaws.com
    region_name: eu-west-1
    versioned_file: bosh/service-ci-service-creds.yml

- name: s3-kubo-release-tarball
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    bucket: kubo-pipeline-store
    endpoint: s3-eu-west-1.amazonaws.com
    region_name: eu-west-1
    versioned_file: release-pr/kubo-release.tgz

- name: kubo-version
  type: semver
  source:
    key: kubo-version
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    bucket: kubo-pipeline-store
    endpoint: s3-eu-west-1.amazonaws.com
    region_name: eu-west-1

- name: slack-alert
  type: slack-notification
  source:
    url: {{slack-url}}

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-deployment
  - get: git-kubo-release
    version: every
    trigger: true
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - task: run-unit-tests
    file: git-kubo-deployment/ci/tasks/run-unit-tests.yml
    on_failure: &on_failure
      aggregate:
      - do:
        - task: alert-text
          file: git-kubo-deployment/ci/tasks/generate-release-pr-messages.yml
          params:
            PR_STATUS: failed
        - put: slack-alert
          params:
            silent: true
            icon_emoji: ":red_circle:"
            text_file: pr-slack-message/message.txt
            text: |
              $TEXT_FILE_CONTENT
              https://p-concourse.kubo.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
      - put: git-kubo-release
        params:
          path: git-kubo-release
          status: failure

- name: claim-lock
  plan:
  - aggregate:
    - get: git-kubo-release
      version: every
      trigger: true
      passed: [ 'run-unit-tests' ]
    - get: git-kubo-deployment
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: pending
  - put: kubo-lock
    params: { acquire: true }

- name: install-bosh
  plan:
  - get: git-kubo-deployment
    passed: [ 'claim-lock' ]
  - get: git-kubo-release
    passed: [ 'claim-lock' ]
  - get: kubo-lock
    version: every
    trigger: true
    passed: [ 'claim-lock' ]
  - task: install
    file: git-kubo-deployment/ci/tasks/install-bosh.yml
    params:
      GCP_SERVICE_ACCOUNT: {{gcp-service-account}}
    on_failure: *on_failure
  - aggregate:
    - put: s3-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: s3-bosh-state
      params:
        file: bosh-state/state.json

- name: build-kubo-release
  plan:
  - aggregate:
    - get: kubo-lock
      version: every
      trigger: true
      passed: [ 'install-bosh' ]
    - get: git-kubo-deployment
      trigger: true
      passed: [ 'install-bosh' ]
    - get: kubo-version
    - get: git-kubo-release
      passed: [ 'install-bosh' ]
    - get: s3-bosh-creds
      passed: [ 'install-bosh' ]
    - get: s3-bosh-state
      passed: [ 'install-bosh' ]
  - task: build-kubo-release
    file: git-kubo-deployment/ci/tasks/build-kubo-release.yml
    on_failure: *on_failure
  - put: s3-kubo-release-tarball
    params:
      file: kubo-release/kubo-release-*.tgz

- name: deploy-k8s
  plan:
  - aggregate:
    - get: kubo-lock
      trigger: true
      version: every
      passed: [ 'build-kubo-release' ]
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
    - get: s3-bosh-state
      passed: [ 'build-kubo-release' ]
    - get: s3-bosh-creds
      passed: [ 'build-kubo-release' ]
    - get: s3-kubo-release-tarball
      passed: [ 'build-kubo-release' ]
  - task: deploy
    file: git-kubo-deployment/ci/tasks/deploy-k8s-instance.yml
    params:
      ROUTING_CF_CLIENT_SECRET: {{routing_cf_client_secret}}
    on_failure: *on_failure
  - put: s3-service-creds
    params:
      file: service-creds/service-ci-service-creds.yml

- name: deploy-workload
  plan:
  - aggregate:
    - get: kubo-lock
      trigger: true
      version: every
      passed: [ 'deploy-k8s' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s' ]
    - get: s3-bosh-state
      passed: [ 'deploy-k8s' ]
    - get: s3-bosh-creds
      passed: [ 'deploy-k8s' ]
    - get: s3-service-creds
      passed: [ 'deploy-k8s' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s' ]
  - task: workload
    file: git-kubo-deployment/ci/tasks/deploy-k8s-workload.yml
    on_failure: *on_failure

- name: destroy-k8s
  plan:
  - aggregate:
    - get: kubo-lock
      trigger: true
      version: every
      passed: [ 'deploy-workload' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-workload' ]
    - get: s3-bosh-state
      passed: [ 'deploy-workload' ]
    - get: s3-bosh-creds
      passed: [ 'deploy-workload' ]
    - get: git-kubo-release
      passed: [ 'deploy-workload' ]
  - task: destroy-k8s
    file: git-kubo-deployment/ci/tasks/destroy-k8s-instance.yml
    on_failure: *on_failure

- name: destroy-bosh
  plan:
  - aggregate:
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s' ]
    - get: kubo-lock
      trigger: true
      version: every
      passed: [ 'destroy-k8s' ]
    - get: s3-bosh-state
      passed: [ 'destroy-k8s' ]
    - get: s3-bosh-creds
      passed: [ 'destroy-k8s' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s' ]
  - task: destroy
    file: git-kubo-deployment/ci/tasks/destroy-bosh.yml
    params:
      GCP_SERVICE_ACCOUNT: {{gcp-service-account}}
    on_failure: *on_failure

  - put: kubo-lock
    params: { release: kubo-lock }
  - task: alert-text
    file: git-kubo-deployment/ci/tasks/generate-release-pr-messages.yml
    params:
      PR_STATUS: succeeded
  - put: slack-alert
    params:
      silent: true
      icon_emoji: ":trex:"
      text_file: pr-slack-message/message.txt
  - put: git-kubo-release
    params:
      path: git-kubo-release
      status: success
