addons:
- include:
    stemcell:
    - os: ubuntu-xenial
  jobs:
  - name: kubo-dns-aliases
    release: kubo
  name: bosh-dns-aliases
features:
  use_dns_addresses: true
instance_groups:
- azs:
  - z1
  instances: 1
  jobs:
  - name: apply-specs
    properties:
      addons:
      - coredns
      - metrics-server
      - kubernetes-dashboard
      admin-password: ((kubo-admin-password))
      admin-username: admin
      api-token: ((kubelet-password))
      tls:
        kubernetes: ((tls-kubernetes))
        kubernetes-dashboard: ((tls-kubernetes-dashboard))
        metrics-server: ((tls-metrics-server))
      specs:
        coredns:
        - name: service-account
          value:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: coredns
              namespace: kube-system
        - name: cluster-role
          value:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                kubernetes.io/bootstrapping: rbac-defaults
              name: system:coredns
            rules:
            - apiGroups:
              - ""
              resources:
              - endpoints
              - services
              - pods
              - namespaces
              verbs:
              - list
              - watch
            - apiGroups:
              - ""
              resources:
              - nodes
              verbs:
              - get
        - name: cluster-role-binding
          value:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              annotations:
                rbac.authorization.kubernetes.io/autoupdate: "true"
              labels:
                kubernetes.io/bootstrapping: rbac-defaults
              name: system:coredns
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:coredns
            subjects:
            - kind: ServiceAccount
              name: coredns
              namespace: kube-system
        - name: config-map
          value:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: coredns
              namespace: kube-system
            data:
              Corefile: |
                .:53 {
                    errors
                    health
                    kubernetes cluster.local in-addr.arpa ip6.arpa {
                      pods insecure
                      upstream
                      fallthrough in-addr.arpa ip6.arpa
                    }
                    prometheus :9153
                    proxy . /etc/resolv.conf {
                      policy sequential # needed for workloads to be able to use BOSH-DNS
                    }
                    cache 30
                    loop
                    reload
                    loadbalance
                }
        - name: deployment
          value:
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              name: coredns
              namespace: kube-system
              labels:
                k8s-app: kube-dns
                kubernetes.io/name: "CoreDNS"
            spec:
              replicas: 3
              strategy:
                type: RollingUpdate
                rollingUpdate:
                  maxUnavailable: 1
              selector:
                matchLabels:
                  k8s-app: kube-dns
              template:
                metadata:
                  labels:
                    k8s-app: kube-dns
                  annotations:
                    seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
                spec:
                  priorityClassName: system-cluster-critical # Added for Guaranteed Scheduling
                  serviceAccountName: coredns
                  tolerations:
                    - key: "CriticalAddonsOnly"
                      operator: "Exists"
                  containers:
                  - name: coredns
                    image: coredns/coredns:1.3.1
                    imagePullPolicy: IfNotPresent
                    resources:
                      limits:
                        memory: 170Mi
                      requests:
                        cpu: 100m
                        memory: 70Mi
                    args: [ "-conf", "/etc/coredns/Corefile" ]
                    volumeMounts:
                    - name: config-volume
                      mountPath: /etc/coredns
                      readOnly: true
                    ports:
                    - containerPort: 53
                      name: dns
                      protocol: UDP
                    - containerPort: 53
                      name: dns-tcp
                      protocol: TCP
                    - containerPort: 9153
                      name: metrics
                      protocol: TCP
                  # NOTE: Security Context is denied unless privileged containers
                  # are enabled. Once security context can be separated from
                  # allow-privileged in the release, then this should become
                  # conditional.
                    # securityContext:
                    #   allowPrivilegeEscalation: false
                    #   capabilities:
                    #     add:
                    #     - NET_BIND_SERVICE
                    #     drop:
                    #     - all
                    #   readOnlyRootFilesystem: true
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                        scheme: HTTP
                      initialDelaySeconds: 60
                      timeoutSeconds: 5
                      successThreshold: 1
                      failureThreshold: 5
                  dnsPolicy: Default
                  volumes:
                    - name: config-volume
                      configMap:
                        name: coredns
                        items:
                        - key: Corefile
                          path: Corefile
        - name: service
          value:
            apiVersion: v1
            kind: Service
            metadata:
              name: kube-dns
              namespace: kube-system
              annotations:
                prometheus.io/port: "9153"
                prometheus.io/scrape: "true"
              labels:
                k8s-app: kube-dns
                kubernetes.io/cluster-service: "true"
                kubernetes.io/name: "CoreDNS"
            spec:
              selector:
                k8s-app: kube-dns
              clusterIP: 10.100.200.10
              ports:
              - name: dns
                port: 53
                protocol: UDP
              - name: dns-tcp
                port: 53
                protocol: TCP
        kubernetes-dashboard: |
          # Copyright 2017 The Kubernetes Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          # Configuration to deploy release version of the Dashboard UI compatible with
          # Kubernetes 1.8.
          #
          # Example usage: kubectl create -f <this_file>

          ---
          # ------------------- Dashboard Service Account ------------------- #

          apiVersion: v1
          kind: ServiceAccount
          metadata:
            labels:
              k8s-app: kubernetes-dashboard
            name: kubernetes-dashboard
            namespace: kube-system

          ---
          # ------------------- Dashboard Role & Role Binding ------------------- #

          kind: Role
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            labels:
              k8s-app: kubernetes-dashboard
            name: kubernetes-dashboard-minimal
            namespace: kube-system
          rules:
            # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret. Added separately from Addons Spec
          - apiGroups: [""]
            resources: ["secrets"]
            verbs: ["create"]

            # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
          - apiGroups: [""]
            resources: ["secrets"]
            resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
            verbs: ["get", "update", "delete"]
            # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
          - apiGroups: [""]
            resources: ["configmaps"]
            resourceNames: ["kubernetes-dashboard-settings"]
            verbs: ["get", "update"]

          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: kubernetes-dashboard-minimal
            namespace: kube-system
            labels:
              k8s-app: kubernetes-dashboard
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: kubernetes-dashboard-minimal
          subjects:
          - kind: ServiceAccount
            name: kubernetes-dashboard
            namespace: kube-system

          ---
          # ------------------- Dashboard Config ------------------- #

          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: kubernetes-dashboard-settings
            namespace: kube-system
            labels:
              k8s-app: kubernetes-dashboard
          ---
          # ------------------- Dashboard Deployment ------------------- #

          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kubernetes-dashboard
            namespace: kube-system
            labels:
              k8s-app: kubernetes-dashboard
          spec:
            selector:
              matchLabels:
                k8s-app: kubernetes-dashboard
            template:
              metadata:
                labels:
                  k8s-app: kubernetes-dashboard
                annotations:
                  scheduler.alpha.kubernetes.io/critical-pod: ''
                  seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
              spec:
                priorityClassName: system-cluster-critical
                containers:
                - name: kubernetes-dashboard
                  image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1
                  resources:
                    limits:
                      cpu: 100m
                      memory: 300Mi
                    requests:
                      cpu: 50m
                      memory: 100Mi
                  ports:
                  - containerPort: 8443
                    protocol: TCP
                  args:
                    - --default-cert-dir=/certs
                    - --tls-cert-file=kubernetes-dashboard-cert
                    - --tls-key-file=kubernetes-dashboard-key
                    # Uncomment the following line
                    # Create on-disk volume to store exec logs
                  volumeMounts:
                  - mountPath: /tmp
                    name: tmp-volume
                  - mountPath: /certs
                    name: kubernetes-dashboard-certs
                    readOnly: true
                  livenessProbe:
                    httpGet:
                      scheme: HTTPS
                      path: /
                      port: 8443
                    initialDelaySeconds: 30
                    timeoutSeconds: 30
                volumes:
                - name: kubernetes-dashboard-certs
                  secret:
                    secretName: kubernetes-dashboard-certs
                - name: tmp-volume
                  emptyDir: {}
                serviceAccountName: kubernetes-dashboard
                tolerations:
                - key: "CriticalAddonsOnly"
                  operator: "Exists"
                # Comment the following tolerations if Dashboard must not be deployed on master
                # tolerations:
                # - key: node-role.kubernetes.io/master
                #  effect: NoSchedule

          ---
          # ------------------- Dashboard Service ------------------- #

          apiVersion: v1
          kind: Service
          metadata:
            name: kubernetes-dashboard
            namespace: kube-system
            labels:
              k8s-app: kubernetes-dashboard
          spec:
            selector:
              k8s-app: kubernetes-dashboard
            ports:
            - port: 443
              targetPort: 8443
            type: NodePort
        metrics-server: |
          ---
          # ------------------- Auth Delegator ------------------- #

          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: metrics-server:system:auth-delegator
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:auth-delegator
          subjects:
          - kind: ServiceAccount
            name: metrics-server
            namespace: kube-system

          ---
          # ------------------- Auth Reader ------------------- #

          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: metrics-server-auth-reader
            namespace: kube-system
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: extension-apiserver-authentication-reader
          subjects:
          - kind: ServiceAccount
            name: metrics-server
            namespace: kube-system

          ---
          # ------------------- Metrics APIService ------------------- #

          apiVersion: apiregistration.k8s.io/v1beta1
          kind: APIService
          metadata:
            name: v1beta1.metrics.k8s.io
          spec:
            service:
              name: metrics-server
              namespace: kube-system
            group: metrics.k8s.io
            version: v1beta1
            insecureSkipTLSVerify: true
            groupPriorityMinimum: 100
            versionPriority: 100

          ---
          # ------------------- Metrics Server Deployment ------------------- #

          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: metrics-server
            namespace: kube-system
          ---
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: metrics-server
            namespace: kube-system
            labels:
              k8s-app: metrics-server
              version: v0.3.1
          spec:
            selector:
              matchLabels:
                k8s-app: metrics-server
            template:
              metadata:
                name: metrics-server
                labels:
                  k8s-app: metrics-server
              spec:
                serviceAccountName: metrics-server
                volumes:
                # mount in tmp so we can safely use from-scratch images and/or read-only containers
                - name: tmp-dir
                  emptyDir: {}
                - name: metrics-server-secrets
                  secret:
                    secretName: metrics-server-certs
                containers:
                - name: metrics-server
                  image: k8s.gcr.io/metrics-server-amd64:v0.3.3
                  imagePullPolicy: IfNotPresent
                  command:
                  - /metrics-server
                  - --kubelet-preferred-address-types=InternalIP
                  - --kubelet-insecure-tls
                  - --client-ca-file=/var/run/kubernetes/client-ca.crt
                  - --requestheader-client-ca-file=/var/run/kubernetes/requestheader-client-ca.crt
                  - --tls-cert-file=/var/run/kubernetes/client.crt
                  - --tls-private-key-file=/var/run/kubernetes/client.key
                  ports:
                  - containerPort: 443
                    name: https
                    protocol: TCP
                  volumeMounts:
                  - name: tmp-dir
                    mountPath: /tmp
                  - name: metrics-server-secrets
                    mountPath: /var/run/kubernetes
                tolerations:
                  - key: "CriticalAddonsOnly"
                    operator: "Exists"

          ---
          # ------------------- Metrics Server Service ------------------- #

          apiVersion: v1
          kind: Service
          metadata:
            name: metrics-server
            namespace: kube-system
            labels:
              kubernetes.io/name: "Metrics-server"
          spec:
            selector:
              k8s-app: metrics-server
            ports:
            - port: 443
              protocol: TCP
              targetPort: https

          ---
          # ------------------- Resource Reader ------------------- #

          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: system:metrics-server
          rules:
          - apiGroups:
            - ""
            resources:
            - nodes/stats
            verbs:
            - create
            - get
          - apiGroups:
            - ""
            resources:
            - pods
            - nodes
            - namespaces
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - "extensions"
            resources:
            - deployments
            verbs:
            - get
            - list
            - watch
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: system:metrics-server
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:metrics-server
          subjects:
          - kind: ServiceAccount
            name: metrics-server
            namespace: kube-system
    release: kubo
  - name: kubernetes-dependencies
    release: kubernetes
  lifecycle: errand
  name: apply-addons
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- azs:
  - z1
  - z2
  - z3
  instances: 3
  jobs:
  - name: bpm
    release: bpm
  - name: flanneld
    properties:
      tls:
        etcdctl:
          ca: ((tls-etcdctl-flanneld.ca))
          certificate: ((tls-etcdctl-flanneld.certificate))
          private_key: ((tls-etcdctl-flanneld.private_key))
    release: kubo
  - name: kubernetes-dependencies
    release: kubernetes
  - name: kube-apiserver
    properties:
      admin-password: ((kubo-admin-password))
      admin-username: admin
      audit-policy:
        apiVersion: audit.k8s.io/v1beta1
        kind: Policy
        rules:
        - level: None
          resources:
          - group: ""
            resources:
            - endpoints
            - services
            - services/status
          users:
          - system:kube-proxy
          verbs:
          - watch
        - level: None
          resources:
          - group: ""
            resources:
            - nodes
            - nodes/status
          users:
          - kubelet
          verbs:
          - get
        - level: None
          resources:
          - group: ""
            resources:
            - nodes
            - nodes/status
          userGroups:
          - system:nodes
          verbs:
          - get
        - level: None
          namespaces:
          - kube-system
          resources:
          - group: ""
            resources:
            - endpoints
          users:
          - system:kube-controller-manager
          - system:kube-scheduler
          - system:serviceaccount:kube-system:endpoint-controller
          verbs:
          - get
          - update
        - level: None
          resources:
          - group: ""
            resources:
            - namespaces
            - namespaces/status
            - namespaces/finalize
          users:
          - system:apiserver
          verbs:
          - get
        - level: None
          resources:
          - group: metrics.k8s.io
          users:
          - system:kube-controller-manager
          verbs:
          - get
          - list
        - level: None
          nonResourceURLs:
          - /healthz*
          - /version
          - /swagger*
        - level: None
          resources:
          - group: ""
            resources:
            - events
        - level: Request
          omitStages:
          - RequestReceived
          resources:
          - group: ""
            resources:
            - nodes/status
            - pods/status
          userGroups:
          - system:nodes
          verbs:
          - update
          - patch
        - level: Request
          omitStages:
          - RequestReceived
          users:
          - system:serviceaccount:kube-system:namespace-controller
          verbs:
          - deletecollection
        - level: Metadata
          omitStages:
          - RequestReceived
          resources:
          - group: ""
            resources:
            - secrets
            - configmaps
          - group: authentication.k8s.io
            resources:
            - tokenreviews
        - level: Request
          omitStages:
          - RequestReceived
          resources:
          - group: ""
          - group: admissionregistration.k8s.io
          - group: apiextensions.k8s.io
          - group: apiregistration.k8s.io
          - group: apps
          - group: authentication.k8s.io
          - group: authorization.k8s.io
          - group: autoscaling
          - group: batch
          - group: certificates.k8s.io
          - group: extensions
          - group: metrics.k8s.io
          - group: networking.k8s.io
          - group: policy
          - group: rbac.authorization.k8s.io
          - group: settings.k8s.io
          - group: storage.k8s.io
          verbs:
          - get
          - list
          - watch
        - level: RequestResponse
          omitStages:
          - RequestReceived
          resources:
          - group: ""
          - group: admissionregistration.k8s.io
          - group: apiextensions.k8s.io
          - group: apiregistration.k8s.io
          - group: apps
          - group: authentication.k8s.io
          - group: authorization.k8s.io
          - group: autoscaling
          - group: batch
          - group: certificates.k8s.io
          - group: extensions
          - group: metrics.k8s.io
          - group: networking.k8s.io
          - group: policy
          - group: rbac.authorization.k8s.io
          - group: settings.k8s.io
          - group: storage.k8s.io
        - level: Metadata
          omitStages:
          - RequestReceived
      k8s-args:
        audit-log-maxage: 0
        audit-log-maxbackup: 7
        audit-log-maxsize: 49
        audit-log-path: /var/vcap/sys/log/kube-apiserver/audit.log
        audit-policy-file: /var/vcap/jobs/kube-apiserver/config/audit_policy.yml
        authorization-mode: RBAC
        client-ca-file: /var/vcap/jobs/kube-apiserver/config/kubernetes-ca.pem
        disable-admission-plugins: []
        enable-admission-plugins: []
        enable-aggregator-routing: true
        enable-bootstrap-token-auth: true
        enable-swagger-ui: true
        etcd-cafile: /var/vcap/jobs/kube-apiserver/config/etcd-ca.crt
        etcd-certfile: /var/vcap/jobs/kube-apiserver/config/etcd-client.crt
        etcd-keyfile: /var/vcap/jobs/kube-apiserver/config/etcd-client.key
        kubelet-client-certificate: /var/vcap/jobs/kube-apiserver/config/kubelet-client-cert.pem
        kubelet-client-key: /var/vcap/jobs/kube-apiserver/config/kubelet-client-key.pem
        proxy-client-cert-file: /var/vcap/jobs/kube-apiserver/config/kubernetes.pem
        proxy-client-key-file: /var/vcap/jobs/kube-apiserver/config/kubernetes-key.pem
        requestheader-allowed-names: aggregator
        requestheader-client-ca-file: /var/vcap/jobs/kube-apiserver/config/kubernetes-ca.pem
        requestheader-extra-headers-prefix: X-Remote-Extra-
        requestheader-group-headers: X-Remote-Group
        requestheader-username-headers: X-Remote-User
        runtime-config: api/v1
        secure-port: 8443
        service-account-key-file: /var/vcap/jobs/kube-apiserver/config/service-account-public-key.pem
        service-cluster-ip-range: 10.100.200.0/24
        storage-media-type: application/json
        tls-cert-file: /var/vcap/jobs/kube-apiserver/config/kubernetes.pem
        tls-private-key-file: /var/vcap/jobs/kube-apiserver/config/kubernetes-key.pem
        token-auth-file: /var/vcap/jobs/kube-apiserver/config/tokens.csv
        v: 2
      kube-controller-manager-password: ((kube-controller-manager-password))
      kube-proxy-password: ((kube-proxy-password))
      kube-scheduler-password: ((kube-scheduler-password))
      kubelet-drain-password: ((kubelet-drain-password))
      kubelet-password: ((kubelet-password))
      service-account-public-key: ((service-account-key.public_key))
      tls:
        kubelet-client: ((tls-kubelet-client))
        kubernetes:
          ca: ((tls-kubernetes.ca))
          certificate: ((tls-kubernetes.certificate))((tls-kubernetes.ca))
          private_key: ((tls-kubernetes.private_key))
    release: kubo
  - name: kube-controller-manager
    properties:
      api-token: ((kube-controller-manager-password))
      cluster-signing: ((kubo_ca))
      k8s-args:
        cluster-signing-cert-file: /var/vcap/jobs/kube-controller-manager/config/cluster-signing-ca.pem
        cluster-signing-key-file: /var/vcap/jobs/kube-controller-manager/config/cluster-signing-key.pem
        kubeconfig: /var/vcap/jobs/kube-controller-manager/config/kubeconfig
        root-ca-file: /var/vcap/jobs/kube-controller-manager/config/ca.pem
        service-account-private-key-file: /var/vcap/jobs/kube-controller-manager/config/service-account-private-key.pem
        terminated-pod-gc-threshold: 100
        tls-cert-file: /var/vcap/jobs/kube-controller-manager/config/kube-controller-manager-cert.pem
        tls-private-key-file: /var/vcap/jobs/kube-controller-manager/config/kube-controller-manager-private-key.pem
        use-service-account-credentials: true
        v: 2
      service-account-private-key: ((service-account-key.private_key))
      tls:
        kube-controller-manager: ((tls-kube-controller-manager))
        kubernetes: ((tls-kubernetes))
    release: kubo
  - name: kube-scheduler
    properties:
      api-token: ((kube-scheduler-password))
      kube-scheduler-configuration:
        apiVersion: kubescheduler.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: /var/vcap/jobs/kube-scheduler/config/kubeconfig
        disablePreemption: false
        kind: KubeSchedulerConfiguration
      tls:
        kubernetes: ((tls-kubernetes))
    release: kubo
  - name: kubernetes-roles
    properties:
      admin-password: ((kubo-admin-password))
      tls:
        kubernetes: ((tls-kubernetes))
      post-start-policies:
      - name: cluster-admin
        value: |
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: kubo:internal:admin
          subjects:
          - kind: User
            name: admin
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
      - name: kube-proxy
        value: |
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: kubo:internal:kube-proxy
          subjects:
          - kind: User
            name: kube-proxy
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:node-proxier
            apiGroup: rbac.authorization.k8s.io
      - name: kube-system-podsecuritypolicy
        value: |
          ---
          apiVersion: policy/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: kube-system-psp
            annotations:
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
              apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
              seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
              apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
          spec:
            privileged: false
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            allowedCapabilities:
            - '*'
            # Allow core volume types.
            hostNetwork: true
            hostPorts:
            - min: 0
              max: 65535
            hostIPC: true
            hostPID: true
            volumes:
              - 'configMap'
              - 'emptyDir'
              - 'projected'
              - 'secret'
              - 'downwardAPI'
            runAsUser:
              # Require the container to run without root privileges.
              rule: 'RunAsAny'
            seLinux:
              # This policy assumes the nodes are using AppArmor rather than SELinux.
              rule: 'RunAsAny'
            supplementalGroups:
              rule: 'RunAsAny'
            fsGroup:
              rule: 'RunAsAny'
              # rule: 'MustRunAs'
              # ranges:
              #   # Forbid adding the root group.
              #   - min: 1
              #     max: 65535
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: psp:kube-system-psp
            namespace: kube-system
          rules:
          - apiGroups:
            - extensions
            resourceNames:
            - kube-system-psp
            resources:
            - podsecuritypolicies
            verbs:
            - use
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: psp:kube-system-psp
            namespace: kube-system
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: psp:kube-system-psp
          subjects:
          - kind: ServiceAccount
            name: coredns
          - kind: ServiceAccount
            name: metrics-server
          - kind: ServiceAccount
            name: kubernetes-dashboard
      - name: kubelet-drain
        value: |
          ---
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: kubo:internal:kubelet-drain
          rules:
          - apiGroups: [""]
            resources: ["nodes"]
            verbs: ["list", "get", "patch", "delete"]
          - apiGroups: [""]
            resources: ["pods"]
            verbs: ["list", "delete"]
          - apiGroups: [""]
            resources: ["pods/eviction"]
            verbs: ["create"]
          - apiGroups: ["apps"]
            resources: ["statefulsets", "daemonsets"]
            verbs: ["get"]
          - apiGroups: ["extensions"]
            resources: ["replicasets", "daemonsets"]
            verbs: ["get"]
          - apiGroups: ["batch"]
            resources: ["jobs"]
            verbs: ["get"]
          - apiGroups: [""]
            resources: ["replicationcontrollers"]
            verbs: ["get"]
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: kubo:internal:kubelet-drain
          subjects:
          - kind: User
            name: kubelet-drain
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: kubo:internal:kubelet-drain
            apiGroup: rbac.authorization.k8s.io
      - name: kubelet
        value: |
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: kubo:internal:kubelet
          subjects:
          - kind: User
            name: kubelet
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:node
            apiGroup: rbac.authorization.k8s.io
    release: kubo
  - name: etcd
    properties:
      etcd:
        dns_suffix: etcd.cfcr.internal
      tls:
        etcd:
          ca: ((etcd_ca.certificate))
          certificate: ((tls-etcd-v0-29-0.certificate))
          private_key: ((tls-etcd-v0-29-0.private_key))
        etcdctl:
          ca: ((tls-etcdctl-v0-29-0.ca))
          certificate: ((tls-etcdctl-v0-29-0.certificate))
          private_key: ((tls-etcdctl-v0-29-0.private_key))
        etcdctl-root:
          ca: ((tls-etcdctl-v0-29-0.ca))
          certificate: ((tls-etcdctl-root.certificate))
          private_key: ((tls-etcdctl-root.private_key))
        peer:
          ca: ((tls-etcd-v0-29-0.ca))
          certificate: ((tls-etcd-v0-29-0.certificate))
          private_key: ((tls-etcd-v0-29-0.private_key))
      users:
      - name: root
        password: ((etcd_user_root_password))
        versions:
        - v2
      - name: flanneld
        password: ((etcd_user_flanneld_password))
        permissions:
          read:
          - /coreos.com/network/*
          write:
          - /coreos.com/network/*
        versions:
        - v2
    release: cfcr-etcd
  - name: smoke-tests
    release: kubo
  name: master
  networks:
  - name: default
  persistent_disk: 5120
  stemcell: default
  vm_type: small
- azs:
  - z1
  - z2
  - z3
  instances: 3
  jobs:
  - name: flanneld
    properties:
      tls:
        etcdctl:
          ca: ((tls-etcdctl-flanneld.ca))
          certificate: ((tls-etcdctl-flanneld.certificate))
          private_key: ((tls-etcdctl-flanneld.private_key))
    release: kubo
  - name: docker
    properties:
      bridge: cni0
      default_ulimits:
      - nofile=1048576
      env: {}
      flannel: true
      ip_masq: false
      iptables: false
      live_restore: true
      log_level: error
      log_options:
      - max-size=128m
      - max-file=2
      storage_driver: overlay2
      store_dir: /var/vcap/data
    release: docker
  - name: kubernetes-dependencies
    release: kubernetes
  - name: kubelet
    properties:
      api-token: ((kubelet-password))
      drain-api-token: ((kubelet-drain-password))
      k8s-args:
        cni-bin-dir: /var/vcap/jobs/kubelet/packages/cni/bin
        container-runtime: docker
        docker: unix:///var/vcap/sys/run/docker/docker.sock
        docker-endpoint: unix:///var/vcap/sys/run/docker/docker.sock
        kubeconfig: /var/vcap/jobs/kubelet/config/kubeconfig
        network-plugin: cni
        root-dir: /var/vcap/data/kubelet
      kubelet-configuration:
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          anonymous:
            enabled: false
          x509:
            clientCAFile: /var/vcap/jobs/kubelet/config/kubelet-client-ca.pem
        authorization:
          mode: Webhook
        clusterDNS:
        - 10.100.200.10
        clusterDomain: cluster.local
        failSwapOn: false
        kind: KubeletConfiguration
        serializeImagePulls: false
        tlsCertFile: /var/vcap/jobs/kubelet/config/kubelet.pem
        tlsPrivateKeyFile: /var/vcap/jobs/kubelet/config/kubelet-key.pem
      tls:
        kubelet:
          ca: ((tls-kubelet.ca))
          certificate: ((tls-kubelet.certificate))((tls-kubelet.ca))
          private_key: ((tls-kubelet.private_key))
        kubelet-client-ca:
          certificate: ((tls-kubelet-client.ca))
        kubernetes: ((tls-kubernetes))
    release: kubo
  - name: kube-proxy
    properties:
      api-token: ((kube-proxy-password))
      kube-proxy-configuration:
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: /var/vcap/jobs/kube-proxy/config/kubeconfig
        clusterCIDR: 10.200.0.0/16
        iptables:
          masqueradeAll: false
          masqueradeBit: 14
          minSyncPeriod: 0s
          syncPeriod: 30s
        kind: KubeProxyConfiguration
        mode: iptables
        portRange: ""
      tls:
        kubernetes: ((tls-kubernetes))
    release: kubo
  name: worker
  networks:
  - name: default
  stemcell: default
  vm_type: small-highmem
name: cfcr
releases:
- name: kubo
  sha1: 15196d78742e8400ca97e0e09903f10e061b4b24
  url: https://storage.googleapis.com/kubo-precompiled-releases/kubo-0.34.0-ubuntu-xenial-315.41-20190621-181712-51217485.tgz
  version: 0.34.0
- name: cfcr-etcd
  sha1: c3f8ad93473190dc2c64169dd291556332642a57
  url: https://storage.googleapis.com/kubo-precompiled-releases/cfcr-etcd-1.11.1-ubuntu-xenial-315.70-20190716-175327-761536081.tgz
  version: 1.11.1
- name: docker
  sha1: d0ceb29605302fdfd16ef1a89fe2d52a5997a8e9
  url: https://storage.googleapis.com/kubo-precompiled-releases/docker-35.2.1-ubuntu-xenial-315.70-20190716-174942-710123101.tgz
  version: 35.2.1
- name: bpm
  sha1: 6d4d11a1c5bf47e49085b45937a5824d1e4830a7
  url: https://storage.googleapis.com/kubo-precompiled-releases/bpm-1.0.4-ubuntu-xenial-315.70-20190716-175908-07910572.tgz
  version: 1.0.4
- name: kubernetes
  version: latest
stemcells:
- alias: default
  os: ubuntu-xenial
  version: "315.70"
update:
  canaries: 1
  canary_watch_time: 10000-300000
  max_in_flight: 1
  update_watch_time: 10000-300000
variables:
- name: kubo-admin-password
  type: password
- name: kubelet-password
  type: password
- name: kubelet-drain-password
  type: password
- name: kube-proxy-password
  type: password
- name: kube-controller-manager-password
  type: password
- name: kube-scheduler-password
  type: password
- name: etcd_user_root_password
  type: password
- name: etcd_user_flanneld_password
  type: password
- name: kubo_ca
  options:
    common_name: ca
    is_ca: true
  type: certificate
- name: tls-kubelet
  options:
    alternative_names: []
    ca: kubo_ca
    common_name: kubelet.cfcr.internal
    organization: system:nodes
  type: certificate
- name: tls-kubelet-client
  options:
    ca: kubo_ca
    common_name: kube-apiserver.cfcr.internal
    extended_key_usage:
    - client_auth
    organization: system:masters
  type: certificate
- name: tls-kubernetes
  options:
    alternative_names:
    - 10.100.200.1
    - kubernetes
    - kubernetes.default
    - kubernetes.default.svc
    - kubernetes.default.svc.cluster.local
    - master.cfcr.internal
    ca: kubo_ca
    common_name: master.cfcr.internal
    organization: system:masters
  type: certificate
- name: service-account-key
  type: rsa
- name: tls-kube-controller-manager
  options:
    alternative_names:
    - localhost
    - 127.0.0.1
    ca: kubo_ca
    common_name: kube-controller-manager
    extended_key_usage:
    - server_auth
    key_usage:
    - digital_signature
    - key_encipherment
  type: certificate
- name: etcd_ca
  options:
    common_name: etcd.ca
    is_ca: true
  type: certificate
- name: tls-etcd-v0-29-0
  options:
    ca: etcd_ca
    common_name: '*.etcd.cfcr.internal'
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: tls-etcdctl-v0-29-0
  options:
    ca: etcd_ca
    common_name: etcdClient
    extended_key_usage:
    - client_auth
  type: certificate
- name: tls-etcdctl-root
  options:
    ca: etcd_ca
    common_name: root
    extended_key_usage:
    - client_auth
  type: certificate
- name: tls-etcdctl-flanneld
  options:
    ca: etcd_ca
    common_name: flanneld
    extended_key_usage:
    - client_auth
  type: certificate
- name: tls-metrics-server
  options:
    alternative_names:
    - metrics-server.kube-system.svc
    ca: kubo_ca
    common_name: metrics-server
  type: certificate
- name: kubernetes-dashboard-ca
  options:
    common_name: ca
    is_ca: true
  type: certificate
- name: tls-kubernetes-dashboard
  options:
    alternative_names: []
    ca: kubernetes-dashboard-ca
    common_name: kubernetesdashboard.cfcr.internal
  type: certificate
