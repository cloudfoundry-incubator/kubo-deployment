#!/usr/bin/env bash

set -o pipefail -e

[[ -z "${DEBUG:-}" ]] || set -x

echo "====================================="
echo "|         KuBOSH Destroyer          |"
echo "====================================="
echo ""

print_usage() {
cat << EOF
  Usage: $0 <BOSH environment path> <private or service account key filename for BOSH to use for deployments>

  * Note: Private key is required for AWS, Azure and Openstack
  * Service account key is required for GCP
EOF
}

repo_directory() {
  echo -n "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
}

set_bosh_environment() {
  local bosh_env="$1"
  export BOSH_CLIENT=bosh_admin

  BOSH_CLIENT_SECRET=$(bosh int "$bosh_env"/creds.yml --path=/bosh_admin_client_secret)
  BOSH_CA_CERT=$(bosh int "$bosh_env"/creds.yml --path=/default_ca/ca)
  BOSH_ENVIRONMENT=$(bosh int "$bosh_env"/director.yml --path=/internal_ip)
  export BOSH_CLIENT_SECRET BOSH_CA_CERT BOSH_ENVIRONMENT
}

main() {
  local bosh_env extra_filename iaas

  bosh_env=$(cd "${1}"; pwd)

  if [ ! -d "${bosh_env}" ]; then
    print_usage
    exit 1
  fi

  iaas=$(bosh int "${bosh_env}/director.yml" --path /iaas)

  if ! [[ "$iaas" =~ ^(gcp|openstack|vsphere|aws)$ ]]; then
    echo "Supported platforms are: 'gcp', 'openstack', 'vsphere', 'aws'"
    echo ""
    print_usage
    exit 1
  fi

  extra_filename="$2"
  if [ -z "${extra_filename}" ] && [ "$iaas" != 'vsphere' ]; then
    print_usage
    exit 1
  fi

  set_bosh_environment "${bosh_env}"
  "destroy_$iaas" "${bosh_env}" "${@:2}"
}

destroy_gcp() {
  local bosh_env service_account

  bosh_env="$1"
  service_account="$2"

  bosh clean-up --all -n
  bosh delete-env "$(repo_directory)/bosh-deployment/bosh.yml" \
    --ops-file "$(repo_directory)/bosh-deployment/gcp/cpi.yml" \
    --state "${bosh_env}/state.json" \
    --var-file gcp_credentials_json="${service_account}" \
    --vars-store "${bosh_env}/creds.yml" \
    --vars-file "${bosh_env}/director.yml"
}

destroy_aws() {
  local bosh_env key_filename
  bosh_env="$1"
  key_filename="$2"

  bosh clean-up --all -n
  bosh delete-env "$(repo_directory)/bosh-deployment/bosh.yml" \
    --ops-file "$(repo_directory)/bosh-deployment/aws/cpi.yml" \
    --state "${bosh_env}/state.json" \
    --var-file private_key="${key_filename}" \
    --vars-store "${bosh_env}/creds.yml" \
    --vars-file "${bosh_env}/director.yml" \
    --vars-file "${bosh_env}/director-secrets.yml"
}

destroy_vsphere() {
  local bosh_env

  bosh_env="$1"

  bosh clean-up --all -n
  bosh delete-env "$(repo_directory)/bosh-deployment/bosh.yml" \
      --ops-file "$(repo_directory)/bosh-deployment/vsphere/cpi.yml" \
      --state "${bosh_env}/state.json" \
      --vars-store "${bosh_env}/creds.yml" \
      --vars-file "${bosh_env}/director.yml" \
      --vars-file "${bosh_env}/director-secrets.yml"
}

destroy_openstack() {
  local bosh_env key_filename

  bosh_env="$1"
  key_filename="$2"

  bosh clean-up --all -n
  bosh delete-env "$(repo_directory)/bosh-deployment/bosh.yml" \
    --ops-file "$(repo_directory)/bosh-deployment/openstack/cpi.yml" \
    --state "${bosh_env}/state.json" \
    --vars-store "${bosh_env}/creds.yml" \
    --vars-file "${bosh_env}/director.yml"  \
    --vars-file "${bosh_env}/director-secrets.yml"  \
    --var-file private_key="${key_filename}"
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"
