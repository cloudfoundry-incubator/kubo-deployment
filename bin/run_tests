#!/bin/bash

# From https://github.com/cloudfoundry/cf-deployment/blob/master/scripts/test

set -eu

exit_code=0
GREEN='\033[0;32m'
LIGHT_GREEN='\033[0;92m'
RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
YELLOW='\033[0;93m'
NOCOLOR='\033[0m'

script_home="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
home="$( cd "${script_home}/.." && pwd )"

# suite_name should be defined by each of our test suite functions
suite_name="UNDEFINED"

# Grab each of our test suites, exercised by test_opsfile_interpolation()
for script in `ls ${script_home}/test-*.sh`; do
  source $script
done

# If we get killed, kill backgrounded processes
trap 'kill $(jobs -p) > /dev/null 2>&1' SIGTERM SIGINT

fail() {
  echo -e "${RED} FAIL - ${LIGHT_RED} $suite_name ${RED} - ${NOCOLOR} $1"
  exit_code=1
}

pass() {
  echo -e "${GREEN} PASS - ${YELLOW} $suite_name ${GREEN} - ${NOCOLOR} $1"
}

skip() {
  echo -e "${YELLOW} SKIP - ${YELLOW} $suite_name ${GREEN} - ${NOCOLOR} $1"
}

interpolate() {
  local tmp_creds_store
  tmp_creds_store=$(mktemp)

  bosh interpolate ${home}/manifests/cfcr.yml \
    $@ \
    -o ${home}/manifests/ops-files/misc/local-config-server.yml \
    --vars-store ${tmp_creds_store} \
    --var-errs \
    --var-errs-unused > /dev/null
  return $?
}

check_interpolation() {
  if [[ ${1} == name:* ]]; then
    name_under_test=$1
    empty_string=""
    ops_under_test="${name_under_test/name: /$empty_string}"; shift
  else
    ops_under_test="${1}"
  fi

  if interpolate "-o $@"; then
    pass "${ops_under_test}"
  else
    fail "${ops_under_test}"
  fi
}

test_opsfile_interpolation() {
  test_standard_ops &
  # test_experimental_ops &
  # test_test_ops &
  # test_legacy_ops &
  # test_addons_ops &

  for job in $(jobs -p); do
    wait $job || exit_code=1
  done
}

ensure_opsfiles_in_readme() {
  local readme=$1
  shift

  suite_name="Readme Test"

  pushd ${home} > /dev/null
    for x in $@; do
      local basename=$(echo $x | sed -e "s%$home/manifests/%%")
      if [ $(grep \($basename\) $readme -c) != "0" ]; then
        pass "$basename is in $(basename "$readme")"
      else
        fail "$basename does not appear in $(basename "$readme")"
      fi
    done;
  popd > /dev/null
}
ensure_opsfiles_in_tests() {

  local test=$1
  shift

  suite_name="$test"

  pushd ${home} > /dev/null
    for x in $@; do
      local basename=$(basename $x)
      if [ $basename == "set-certificate-duration.yml" ]; then
        skip "$basename is ${YELLOW}SKIPPED${NOCOLOR} in $test"
      else
        if [ $(grep $basename ${script_home}/$test -c) != "0" ]; then
          pass "$basename is tested in $test"
        else
          fail "$basename is ${RED}NOT${NOCOLOR} tested in $test"
        fi
      fi
    done;
  popd > /dev/null
}

main() {
  echo
  echo -e "${LIGHT_GREEN} ***** Begin rspec tests ***** ${NOCOLOR}"
  project_root="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )"
  pushd "${project_root}" > /dev/null
    bundle install
    bundle exec rspec spec/*_spec.rb
  popd > /dev/null

  echo
  echo -e "${LIGHT_GREEN} ***** Begin affirmative readme operations tests ***** ${NOCOLOR}"
  local ops_files;
  ops_files=$(ls ${home}/manifests/ops-files/*.yml ${home}/manifests/ops-files/iaas/{aws,azure,gcp,openstack,vsphere,virtualbox}/*.yml)
  ensure_opsfiles_in_readme "$home/manifests/README.md" "$ops_files"

  echo
  echo -e "${LIGHT_GREEN} ***** Begin test coverage analysis ***** ${NOCOLOR}"
  ensure_opsfiles_in_tests "test-standard-ops.sh" "$ops_files"

  echo
  echo -e "${LIGHT_GREEN} ***** Begin interpolation operations tests ***** ${NOCOLOR}"
  test_opsfile_interpolation

  exit $exit_code
}

main
