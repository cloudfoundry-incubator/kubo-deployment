#@IgnoreInspection BashAddShebang
# vim: set ft=sh

export_bosh_environment() {
  export BOSH_ENV=$1
  export BOSH_NAME=$(basename ${BOSH_ENV})
}

get_bosh_secret() {
  get_setting "creds.yml" "/bosh_admin_client_secret"
}

get_setting() {
  local file_name=$1
  local value_path=$2

  bosh-cli int ${BOSH_ENV}/${file_name} --path "${value_path}" | xargs echo -n
}

set_cloud_config() {
  local lib_path=$(cd $(dirname ${BASH_SOURCE[0]}); pwd)
  local cloud_config=$(${lib_path}/../generate_cloud_config ${BOSH_ENV})
  echo "$cloud_config" | BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh-cli -n -e "${BOSH_NAME}" update-cloud-config -
}

deploy_to_bosh() {
  local bosh_manifest=$1
  local deployment_name=$2

  if [ $# -ne 2 ]; then
    echo "Bosh manifest and deployment name are required in $0:deploy_to_bosh()"
    exit 1
  fi

  echo "${bosh_manifest}" | BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh-cli -d ${deployment_name} -n deploy --no-redact -
}

create_and_upload_release() {
  local release_dirname=$1
  local release_name="${release_dirname%-release}"

  if [ -d "$release_dirname" ]; then
    pushd "$release_dirname"
      BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh-cli create-release --force --name "${release_name}"
      upload_release "--name=${release_name}"
    popd
  else
    echo "${release_dirname} repo not found - unable to create the ${release_name} release"
    exit 1
  fi
}

upload_release() {
  local release_name=$1

  BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh-cli upload-release "$release_name"
}

generate_manifest() {
  if [ $# -ne 4 ]; then
    echo "Required arguments are <path to kubo bosh environment>, <deployment name>, <base manifest path> and <director uuid> in ${BASH_SOURCE[0]}:generate_manifest()"
    exit 1
  fi

  local bosh_environment=$1
  local deployment_name=$2
  local manifest_path=$3
  local director_uuid=$4

  manifest_dir=$(cd "$(dirname "${manifest_path}")"; pwd)
  manifest="$(cat "${manifest_path}")"
  local routing_mode="$(bosh-cli int "${bosh_environment}/director.yml" --path='/routing_mode')"
  local iaas="$(bosh-cli int "${bosh_environment}/director.yml" --path='/iaas')"

  if [ -f "${bosh_environment}/${deployment_name}.yml" ]; then
    manifest=$(bosh-cli int <(echo "${manifest}") --ops-file="${bosh_environment}/${deployment_name}.yml")
  fi

  if bosh-cli int "${bosh_environment}/director.yml" --path='/http_proxy' &>/dev/null; then
    manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/add-http-proxy.yml")
  fi

  if bosh-cli int "${bosh_environment}/director.yml" --path='/https_proxy' &>/dev/null; then
    manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/add-https-proxy.yml")
  fi

  if bosh-cli int "${bosh_environment}/director.yml" --path='/no_proxy' &>/dev/null; then
    manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/add-no-proxy.yml")
  fi

  case "$routing_mode" in
    cf)
      manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/cf-routing.yml")
      if [ -f "${manifest_dir}/ops-files/remove-haproxy.yml" ]; then
        manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/remove-haproxy.yml")
      fi
    ;;
    proxy)

      if [ "openstack" == "$iaas" ] || [ "vsphere" == "$iaas" ]; then
        manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/master-haproxy-"$iaas".yml")
      fi

      manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/worker-haproxy.yml")
      if [ "openstack" == "$iaas" ]; then
        manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/worker-haproxy-openstack.yml")
      fi
    ;;
    *)
      if [ -f "${manifest_dir}/ops-files/remove-haproxy.yml" ]; then
        manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/remove-haproxy.yml")
      fi
    ;;
  esac

  if [ -f "${manifest_dir}/ops-files/${iaas}-cloud-provider.yml" ]; then
    manifest=$(bosh-cli int <(echo "$manifest") --ops-file="${manifest_dir}/ops-files/${iaas}-cloud-provider.yml" -v director_uuid="${director_uuid}")
  fi

  if [ -f "${bosh_environment}/${deployment_name}-vars.yml" ]; then
    manifest=$(bosh-cli int <(echo "${manifest}") --vars-file="${bosh_environment}/${deployment_name}-vars.yml")
  fi

  manifest=$(bosh-cli int <(echo "${manifest}") --vars-file="${bosh_environment}/director.yml" --var=deployment_name="${deployment_name}")

  if [ -f "${bosh_environment}/creds.yml" ]; then
    manifest=$(bosh-cli int <(echo "${manifest}") --vars-file="${bosh_environment}/creds.yml")
  fi

  if [ -f "${bosh_environment}/director-secrets.yml" ]; then
    manifest=$(bosh-cli int <(echo "${manifest}") --vars-file="${bosh_environment}/director-secrets.yml")
  fi

  printf "%s" "${manifest}"
}
