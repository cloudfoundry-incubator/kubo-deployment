#@IgnoreInspection BashAddShebang
# vim: set ft=sh

export_bosh_environment() {
  export BOSH_ENV=$1
  export BOSH_NAME=$(basename ${BOSH_ENV})
}

get_bosh_secret() {
  get_setting "creds.yml" "/bosh_admin_client_secret"
}

get_setting() {
  local file_name=$1
  local value_path=$2

  bosh-cli int ${BOSH_ENV}/${file_name} --path=${value_path} | xargs echo -n
}

set_cloud_config() {
  bin/generate_cloud_config ${BOSH_ENV} | BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh-cli -n -e ${BOSH_NAME} update-cloud-config -
}

deploy_to_bosh() {
  local bosh_manifest=$1
  local deployment_name=$2

  if [ $# -ne 2 ]; then
    echo "Bosh manifest and deployment name are required in $0:deploy_to_bosh()"
    exit 1
  fi

  printf "${bosh_manifest}" | BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh-cli -e "$BOSH_NAME" -d ${deployment_name} -n deploy --no-redact -
}

create_and_upload_release() {
  local repo_directory=$1
  local release_dirname=$(basename $repo_directory)
  local release_name="${release_dirname%-release}"

  if [ -d "$repo_directory" ]; then
    pushd "$repo_directory"
      BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) bosh-cli -e "${BOSH_NAME}" create-release --force --name "${release_name}"
      upload_release "--name=${release_name}" 
    popd
  else
    echo "${repo_directory} repo not found - unable to create the ${repo_directory} release"
    exit 1
  fi
}

upload_release() {
  local release_name=$1

  BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret)  bosh-cli -e "$BOSH_NAME" upload-release "$release_name"
}

generate_manifest() {
  if [ $# -ne 3 ]; then
    echo "Required arguments are bosh_target and deployment_name in $0:generate_manifest()"
    exit 1
  fi

  local bosh_environment=$1
  local deployment_name=$2

  pushd "$(dirname "${BASH_SOURCE[0]}")/../../" > /dev/null
    manifest="$(cat "manifests/service.yml")"

    if [ -e "${bosh_environment}/service-${deployment_name}.yml" ]; then
      manifest=$(printf "%s" "${manifest}" | bosh-cli int - --ops-file="${bosh_environment}/service-${deployment_name}.yml")
    fi

    if [ -e "${bosh_environment}/service-${deployment_name}-vars.yml" ]; then
      manifest=$(printf "%s" "${manifest}" | bosh-cli int - --vars-file="${bosh_environment}/service-${deployment_name}-vars.yml")
    fi

    manifest=$(printf "%s" "${manifest}" | bosh-cli int - \
        --vars-file="${bosh_environment}/director.yml" \
        --var=deployment_name="${deployment_name}")

    if [ -e "${bosh_environment}/creds.yml" ]; then
      manifest=$(printf "%s" "${manifest}" | bosh-cli int - --vars-file="${bosh_environment}/creds.yml")
    fi

    if [ -e "${bosh_environment}/director-secrets.yml" ]; then
      # local deployment, fill in credentials if a secrets file exists.
      # otherwise they will be filled in by CredHub
      manifest=$(printf "%s" "${manifest}" | bosh-cli int - --vars-file="${bosh_environment}/director-secrets.yml")
    fi

    manifest=$(printf "%s" "${manifest}" | bosh-cli int - \
        --vars-store="${bosh_environment}/service-${deployment_name}-creds.yml")

    manifest=$(printf "%s" "${manifest}" | bosh-cli int - --ops-file=manifests/ops-files/remove-variables.yml)

    printf "%s" "${manifest}"
  popd > /dev/null
}
