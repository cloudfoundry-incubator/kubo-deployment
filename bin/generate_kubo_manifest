#!/usr/bin/env bash

set -e -o pipefail

[[ -z "${DEBUG:-}" ]] || set -x

print_help() {
  echo "Usage: ${BASH_SOURCE[0]} [KUBO_ENV] [DEPLOYMENT_NAME] [DIRECTOR_UUID]"
  echo ""
  echo "KUBO_ENV is the path to the Kubo environment folder."
  echo "    It must contain a director.yml with the cluster settings."
  echo "    If there is a creds.yml file in KUBO_ENV directory,"
  echo "    it will be used fill in the credentials during manifest"
  echo "    generation. Otherwise, BOSH director will search for the"
  echo "    credentials in CredHub"
  echo ""
  echo "DEPLOYMENT_NAME is the name for your k8s deployment"
  echo ""
  echo "A note on manifest customisation:"
  echo "  - if a <KUBO_ENV>/<DEPLOYMENT_NAME>.yml is present,"
  echo "    it will be interpreted as a set of go-patch(*) commands"
  echo "    and applied to the generated manifest."
  echo "    (*) see https://github.com/cppforlife/go-patch"
  echo "  - if a <KUBO_ENV>/<DEPLOYMENT_NAME>-vars.yml is present,"
  echo "    it will be used to override the variables in the"
  echo "    generated manifest. See $(repo_directory)/manifests/cfcr.yml"
  echo "    to discover which variables are available in the Kubo manifest."
  echo ""
  echo "DIRECTOR_UUID - The uuid of the director being used for this deployment"
}

repo_directory() {
  echo -n "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
}

main() {
  if [ $# -ne 3 ]; then
    print_help
    exit 1
  fi

  local bosh_env="${1}"
  local deployment_name="${2}"
  local director_uuid="${3}"

  if [ ! -f "${bosh_env}/director.yml" ]; then
    print_help
    exit 1
  fi

  # shellcheck disable=SC1090
  source "$(repo_directory)/bin/lib/deploy_utils"
  generate_manifest "${bosh_env}" "${deployment_name}" "$(repo_directory)/manifests/cfcr.yml" "${director_uuid}"
}

is_run_standalone() {
  [[ "$0" == "${BASH_SOURCE[0]}" ]]
}

is_run_standalone && main "$@"
