#!/usr/bin/env bash

[ -z "$DEBUG" ] || set -x

set -o pipefail -e

echo "====================================="
echo "|     BOSH K8S Cluster Deployer     |"
echo "====================================="
echo

print_usage() {
  local release_path=$(cd $(basename "$0"/../..) > /dev/null; pwd)
  echo "Usage: $(basename "$0") [BOSH_ENV] [DEPLOYMENT_NAME] [RELEASE_SOURCE]"
  echo ""
  echo "BOSH_ENV is the path to your BOSH environment configuration folder"
  echo ""
  echo "DEPLOYMENT_NAME is the name of your kubo deployment"
  echo ""
  echo "RELEASE_SOURCE specifies where to find the kubo BOSH release"
  echo "  options:"
  echo "     dev    - Build a dev release from the local machine."
  echo "              The kubo-release repo must exist in ${release_path}"
  echo "     public - (default) Use published precompiled release from the Internet"
  echo "              Uses 'kubo_release_url' from <BOSH_ENV>/director.yml"
  echo "              This option requires latest version of kubo-deployment"
  echo "     local  - Use local tarball release"
  echo "              The kubo-release.tgz must exist in ${release_path}"
  echo "     skip   - Use releases already uploaded to the BOSH director"
  echo ""
}

repo_directory() {
  echo -n "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
}

get_director_uuid() {
  BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) \
       bosh-cli int <(bosh-cli environment --json) --path=/Tables/0/Rows/0/uuid
}

main() {
  if [ $# -ne 2 ] && [ $# -ne 3 ]; then
    print_usage
    exit  1
  fi

  local bosh_env="$(cd "${1}"; pwd -P)"
  local deployment_name="${2}"
  local release_source="${3}"
  local platform=$(bosh-cli int ${bosh_env}/director.yml --path /iaas)

  if [ -z "$platform" ]; then
   echo "${bosh_env} is not a valid BOSH environment."
   echo "Please use 'generate_env_config' to create one."
   print_usage
   exit 1
  fi

  source "$(repo_directory)/bin/lib/deploy_utils"

  case ${release_source} in
    "dev"|"public"|"local"|"skip") ;;
    "") release_source="public";;
    *) print_usage; exit 1;;
  esac

  BOSH_ENV="$bosh_env" source "$(repo_directory)/bin/set_bosh_environment"

  export_bosh_environment "${bosh_env}"
  upload_releases "${release_source}"
  set_cloud_config
  manifest=$("$(repo_directory)/bin/generate_kubo_manifest" "${bosh_env}" "${deployment_name}" "$(get_director_uuid)")
  stemcell_version=$(bosh-cli int <(echo -n "${manifest}") --path '/stemcells/0/version')
  upload_stemcell "${release_source}" "${platform}" "${stemcell_version}"

  deploy_to_bosh "${manifest}" "${deployment_name}"
}

upload_releases() {
  local release_source=$1

  case ${release_source} in
    "dev")
      pushd "$(repo_directory)/../" > /dev/null
        create_and_upload_release 'kubo-release'
      popd > /dev/null
      ;;
    "public")
       upload_release "$(get_setting director.yml "/kubo_release_url")"
      ;;
    "local")
      pushd "$(repo_directory)/../" > /dev/null
        upload_release "kubo-release.tgz"
      popd > /dev/null
      ;;
    "skip")
    	echo "Skipped uploading releases"
	;;
    *)
      echo "unknown RELEASE_SOURCE: '${release_source}'"
      exit 1
    esac
}

upload_stemcell() {
  local stemcell_version=$3
  if [ "$1" != "skip" ]; then
    case $2 in
    "gcp")
      bosh-cli upload-stemcell "https://s3.amazonaws.com/bosh-core-stemcells/google/bosh-stemcell-${stemcell_version}-google-kvm-ubuntu-trusty-go_agent.tgz"
      ;;
    "vsphere")
      bosh-cli upload-stemcell "https://s3.amazonaws.com/bosh-core-stemcells/vsphere/bosh-stemcell-${stemcell_version}-vsphere-esxi-ubuntu-trusty-go_agent.tgz"
      ;;
    "openstack")
      bosh-cli upload-stemcell "https://s3.amazonaws.com/bosh-core-stemcells/openstack/bosh-stemcell-${stemcell_version}-openstack-kvm-ubuntu-trusty-go_agent.tgz"
      ;;
     "aws")
      bosh-cli upload-stemcell "https://s3.amazonaws.com/bosh-aws-light-stemcells/light-bosh-stemcell-${stemcell_version}-aws-xen-hvm-ubuntu-trusty-go_agent.tgz"
      ;;
    esac
  fi
 }

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"
