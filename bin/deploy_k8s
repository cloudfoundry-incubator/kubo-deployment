#!/usr/bin/env bash

set -o pipefail -e

[[ -z "${DEBUG:-}" ]] || set -x

echo "====================================="
echo "|     BOSH K8S Cluster Deployer     |"
echo "====================================="
echo

print_usage() {
  local release_path=$(cd $(basename "$0"/../..) > /dev/null; pwd)
  echo "Usage: $(basename "$0") [KUBO_ENV] [DEPLOYMENT_NAME] [RELEASE_SOURCE]"
  echo ""
  echo "KUBO_ENV is the path to your Kubo environment configuration folder"
  echo ""
  echo "DEPLOYMENT_NAME is the name of your kubo deployment"
  echo ""
  echo "RELEASE_SOURCE specifies where to find the kubo BOSH release"
  echo "  options:"
  echo "     dev    - Build a dev release from the local machine."
  echo "              The kubo-release repo must exist in ${release_path}"
  echo "     public - Use published precompiled release from the Internet"
  echo "              Uses 'kubo_release_url' from <KUBO_ENV>/director.yml"
  echo "              This option requires latest version of kubo-deployment"
  echo "     local  - (default) Use local tarball release"
  echo "              The kubo-release.tgz must exist in ${release_path}"
  echo "     skip   - Use releases already uploaded to the BOSH director"
  echo ""
}

repo_directory() {
  echo -n "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
}

get_director_uuid() {
  BOSH_ENVIRONMENT="${BOSH_NAME}" BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET=$(get_bosh_secret) \
       bosh int <(bosh environment --json) --path=/Tables/0/Rows/0/uuid
}

get_deps() {
  source "$(repo_directory)/bin/lib/deploy_utils"
}

main() {
  get_deps

  PATH=$(repo_directory)/bin:$PATH
  if [ $# -ne 2 ] && [ $# -ne 3 ]; then
    print_usage
    exit  1
  fi

  local bosh_env="$(cd "${1}"; pwd -P)"
  local deployment_name="${2}"
  local release_source="${3}"
  local platform=$(bosh int ${bosh_env}/director.yml --path /iaas)

  if [ -z "$platform" ]; then
   echo "${bosh_env} is not a valid BOSH environment."
   echo "Please use 'generate_env_config' to create one."
   print_usage
   exit 1
  fi

  case ${release_source} in
    "dev"|"public"|"local"|"skip") ;;
    "") release_source="local";;
    *) print_usage; exit 1;;
  esac

  BOSH_ENV="$bosh_env" source "$(repo_directory)/bin/set_bosh_environment"

  export_bosh_environment "${bosh_env}"
  set_cloud_config

  if [[ "${release_source}" != "skip" ]]; then
    upload_artefacts "${bosh_env}" "${release_source}"
  fi

  manifest=$("$(repo_directory)/bin/generate_kubo_manifest" "${bosh_env}" "${deployment_name}" "$(get_director_uuid)")

  deploy_to_bosh "${manifest}" "${deployment_name}"

  if bosh int <(echo -n "${manifest}") --path /instance_groups/name=apply-addons &>/dev/null; then
    bosh -d "${deployment_name}" run-errand apply-specs
  fi
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"
