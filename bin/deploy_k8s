#!/bin/bash -e

set -o pipefail

[ -z "$DEBUG" ] || set -x


echo "====================================="
echo "|     BOSH K8S Cluster Deployer     |"
echo "====================================="
echo


print_usage() {
  local release_path=$(cd $(basename "$0"/../..) > /dev/null; pwd)
  echo "Usage: $(basename "$0") [BOSH_ENV] [DEPLOYMENT_NAME] [RELEASE_SOURCE]"
  echo ""
  echo "BOSH_ENV is the path to your BOSH environment configuration folder"
  echo ""
  echo "DEPLOYMENT_NAME is the name of your kubo deployment"
  echo ""
  echo "RELEASE_SOURCE specifies where to find the kubo BOSH release"
  echo "  options:"
  echo "     dev    - Build a dev release from the local machine."
  echo "              The kubo-release repo must exist in ${release_path}"
  echo "     public - (default) Use published release from the Internet"
  echo "              Uses 'kubo_release_url' from <BOSH_ENV>/director.yml"
  echo "     local  - Use local tarball release"
  echo "              The kubo-release.tgz must exist in ${release_path}"
  echo "     skip   - Use releases already uploaded to the BOSH director"
  echo ""
}

repo_directory() {
  echo -n $(cd "$(dirname ${BASH_SOURCE[0]})/.."; pwd)
}

main() {
  if [ $# -ne 2 ] && [ $# -ne 3 ]; then
    print_usage
    exit  1
  fi

  local bosh_env="$(cd "${1}"; pwd -P)"
  local deployment_name="${2}"
  local release_source="${3}"

  if [ -z "$(bosh-cli int ${bosh_env}/director.yml --path /iaas)" ]; then
   echo "${bosh_env} is not a valid BOSH environment."
   echo "Please use 'generate_env_config' to create one."
   print_usage
   exit 1
  fi

  case ${release_source} in
    "dev"|"public"|"local"|"skip") ;;
    "") release_source="public";;
    *) print_usage; exit 1;;
  esac


  . "$(repo_directory)/bin/lib/deploy_utils"

  local bosh_director_name
  export_bosh_environment "${bosh_env}"
  bosh_director_name="$(get_setting "director.yml" /director_name)"

  upload_stemcell "${release_source}"
  upload_releases "${release_source}"
  set_cloud_config
  set_kubernetes_certificate_in_credhub "${bosh_director_name}/${deployment_name}/tls-kubernetes"
  deploy_to_bosh "$("$(repo_directory)/bin/generate_kubo_manifest" "${bosh_env}" "${deployment_name}")" "${deployment_name}"
}

set_kubernetes_certificate_in_credhub() {
  local secret_path=$1
  local credhub_user_password="$(get_setting "creds.yml" "/credhub_user_password")"
  local credhub_api_url="https://$(get_setting "director.yml" "/internal_ip"):8844"
  local tcp_router_ip=""
  if [ "$(get_setting "director.yml" "/routing_mode")" = "cf" ]; then
    tcp_router_ip="$(get_setting "director.yml" "/cf-tcp-router-name")"
  else
    tcp_router_ip="$(get_setting "director.yml" "/kubernetes_api_ip")"
  fi

  credhub login -u credhub-user -p "${credhub_user_password}" -s "${credhub_api_url}" --skip-tls-validation
  credhub generate -n "${secret_path}" -t certificate -c "${tcp_router_ip}" -a "${tcp_router_ip}" -O
}

upload_releases() {
  local release_source=$1

  case ${release_source} in
    "dev")
      pushd "$(repo_directory)/../" > /dev/null
        create_and_upload_release 'kubo-release'
      popd > /dev/null
      ;;
    "public")
       upload_release "$(get_setting director.yml "/kubo_release_url")"
      ;;
    "local")
      pushd "$(repo_directory)/../" > /dev/null
        upload_release "kubo-release.tgz"
      popd > /dev/null
      ;;
    "skip")
    	echo "Skipped uploading releases"
	;;
    *)
      echo "unknown RELEASE_SOURCE: '${release_source}'"
      exit 1
    esac
}

upload_stemcell() {
  local release_source=$1
  
  if [ "${release_source}" != "skip" ]; then
    local stemcell_url="$(get_setting director.yml /stemcell_url)"
    BOSH_CLIENT=bosh_admin BOSH_CLIENT_SECRET="$(get_bosh_secret)" bosh-cli -e "${BOSH_NAME}" upload-stemcell ${stemcell_url}
  fi
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"
