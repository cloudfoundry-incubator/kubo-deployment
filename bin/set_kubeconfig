#!/bin/bash -e

set -o pipefail

[ -z "$DEBUG" ] || set -x


print_usage() {
  echo "Usage: `basename $0` [BOSH_ENV] [DEPLOYMENT_NAME]"
  echo ""
  echo "BOSH_ENV is the path to your BOSH environment configuration folder"
  echo ""
  echo "DEPLOYMENT_NAME is the name of your kubo deployment"
  echo ""
  echo "This script configures kubectl with your deployed kubo instance"
  echo "After running this command try: kubectl get pods --namespace=kube-system"
}

main() {
  local bosh_env=$(cd "${1}"; pwd -P)
  local deployment_name="${2}"

  if [ $# -ne 2 ]; then
    print_usage
    exit  1
  fi

  pushd $(dirname $0)/.. > /dev/null
    . ./bin/lib/deploy_utils
    export_bosh_environment ${bosh_env}

    tmp_ca_file="$(mktemp)"
    credhub get -n "$(basename ${bosh_env})/${deployment_name}/tls-kubernetes" --output-json | jq -r .ca > ${tmp_ca_file}

    port=$(get_setting director.yml "/external-kubo-port")
    endpoint=$(get_setting director.yml "/cf-tcp-router-name")
    address="https://${endpoint}:${port}"
    admin_password=$(get_setting ${deployment_name}-service-creds.yml "/kubo-admin-password")
    context_name="kubo-${deployment_name}"

    kubectl config set-cluster ${deployment_name} --server=$address --certificate-authority="${tmp_ca_file}" --embed-certs=true
    kubectl config set-credentials ${deployment_name}-admin --token=${admin_password}
    kubectl config set-context ${context_name} --cluster=${deployment_name} --user=${deployment_name}-admin
    kubectl config use-context ${context_name}

    echo "Created new kubectl context ${context_name}"
    echo "Try: kubectl get pods --namespace=kube-system"
  popd > /dev/null
}


main $@
