#!/usr/bin/env bash

set -o pipefail -e

[[ -z "${DEBUG:-}" ]] || set -x

print_usage() {
  echo "Usage: $(basename "$0") [KUBO_ENV] [DEPLOYMENT_NAME]"
  echo ""
  echo "KUBO_ENV is the path to your BOSH environment configuration folder"
  echo ""
  echo "DEPLOYMENT_NAME is the name of your kubo deployment"
  echo ""
  echo "This script configures kubectl with your deployed kubo instance"
  echo "After running this command try: kubectl get pods --namespace=kube-system"
}

repo_directory() {
  echo -n "$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
}

main() {
  local bosh_env deployment_name
  bosh_env=$(cd "${1}"; pwd -P)
  deployment_name="${2}"

  if [ $# -ne 2 ]; then
    print_usage
    exit  1
  fi

  if [ -z "$(bosh int "${bosh_env}/director.yml" --path /iaas)" ]; then
   echo "${bosh_env} is not a valid BOSH environment."
   echo "Please use 'generate_env_config' to create one."
   print_usage
   exit 1
  fi

  # shellcheck disable=SC1090
  source "$(repo_directory)/bin/lib/deploy_utils"
  export_bosh_environment "${bosh_env}"

  local director_name
  director_name=$(get_setting director.yml "/director_name")

  "$(repo_directory)/bin/credhub_login" "${bosh_env}"
  tmp_ca_file="$(mktemp)"
  trap 'rm "${tmp_ca_file}"' EXIT

  bosh int <(credhub get -n "${director_name}/${deployment_name}/tls-kubernetes" --output-json) --path=/value/ca > "${tmp_ca_file}"

  endpoint="$(get_setting director.yml "/kubernetes_master_host")"
  port="$(get_setting_with_default director.yml "/kubernetes_master_port" 8443)"

  address="https://${endpoint}:${port}"
  set +x
  admin_password=$(bosh int <(credhub get -n "${director_name}/${deployment_name}/kubo-admin-password" --output-json) --path=/value)
  restore_debug_output
  cluster_name="kubo:${director_name}:${deployment_name}"
  user_name="kubo:${director_name}:${deployment_name}-admin"
  context_name="kubo:${director_name}:${deployment_name}"

  kubectl config set-cluster "${cluster_name}" --server="$address" --certificate-authority="${tmp_ca_file}" --embed-certs=true
  set +x
  kubectl config set-credentials "${user_name}" --token="${admin_password}"
  restore_debug_output
  kubectl config set-context "${context_name}" --cluster="${cluster_name}" --user="${user_name}"
  kubectl config use-context "${context_name}"

  echo "Created new kubectl context ${context_name}"
  echo "Try: kubectl get pods --namespace=kube-system"
}


[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"
